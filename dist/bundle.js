(()=>{"use strict";var e={n:s=>{var t=s&&s.__esModule?()=>s.default:()=>s;return e.d(t,{a:t}),t},d:(s,t)=>{for(var r in t)e.o(t,r)&&!e.o(s,r)&&Object.defineProperty(s,r,{enumerable:!0,get:t[r]})},o:(e,s)=>Object.prototype.hasOwnProperty.call(e,s)};const s=require("express");var t=e.n(s);const r=require("mongoose");var a=e.n(r);const n=require("dotenv");var o=e.n(n);o().config();const i=process.env.PORT||8e3,d=a().Schema({name:{type:String,required:!0},email:{type:String,required:!0,unique:!0},password:{type:String,required:!0},user_role:{type:String,required:!0},isActive:{type:Boolean,default:!1},resetPasswordToken:{type:String},resetPasswordExpires:{type:Date}},{timestamps:!1,versionKey:!1}),u=a().model("user",d),c=a().Schema({user_id:{type:String,required:!0},bdm:{type:String,required:!0},branch_name:{type:String,required:!0},company_name:{type:String},contact_person:{type:String,required:!0},email:{type:String,required:!0},contact_no:{type:Number,required:!0},services:{type:[String],required:!0},closed_by:{type:String},total_amount:{type:Number,required:!0},term_1:{type:Number},term_2:{type:Number},term_3:{type:Number},payment_date:{type:Date},pan:{type:String},gst:{type:String},remark:{type:String},date:{type:Date,required:!0},after_disbursement:{type:String},bank:{type:String},state:{type:String,required:!0},status:{type:String},updatedhistory:[{updatedBy:String,updatedAt:{type:Date,default:Date.now},note:String,changes:{type:Map,of:new(a().Schema)({old:a().Schema.Types.Mixed,new:a().Schema.Types.Mixed},{_id:!1})}}],isDeleted:{type:Boolean,default:!1},deletedAt:{type:Date,default:null},deletedBy:{type:String,default:null}},{versionKey:!1,timestamps:!0}),l=a().model("booking",c),p=require("crypto");var m=e.n(p);const g=require("nodemailer");var y=e.n(g);const h=require("bcrypt");var f=e.n(h);const w=require("jsonwebtoken");var v=e.n(w);const b=async(e,s,t)=>{try{const r=e.headers.authorization;if(!r)return s.status(401).send({message:"Authentication required"});const a=v().verify(r,process.env.JWT_SECRET);e.user=a,t()}catch(e){return s.status(401).send({message:"Invalid or expired token"})}},S=(e,s,t)=>{if("srdev"!==e.user?.user_role)return s.status(403).send({message:"Access denied. Only devs can access this route."});t()};o().config();const A=t().Router();A.post("/adduser",b,S,(async(e,s)=>{try{const{name:t,email:r,password:a,user_role:n}=e.body;if(!t||!r||!a)return s.status(400).send({message:"send all required fields: name, email, password"});const o=r.toLowerCase();if(await u.findOne({email:o}))return s.status(409).send({message:"Email is already registered"});const i={name:t,email:o,password:await f().hash(a,5),user_role:n},d=await u.create(i);return s.status(201).send(d)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.patch("/edituser/:id",b,S,(async(e,s)=>{try{const{id:t}=e.params,r=e.body;if(!r||0===Object.keys(r).length)return s.status(400).send({message:"No fields provided for update"});if(r.email&&(r.email=r.email.toLowerCase(),await u.findOne({email:r.email,_id:{$ne:t}})))return s.status(409).send({message:"Email is already registered"});r.password&&(r.password=await f().hash(r.password,5));const a=await u.findByIdAndUpdate(t,{$set:r},{new:!0,runValidators:!0});return a?s.status(200).send({message:"User updated successfully",user:a}):s.status(404).send({message:"User not found"})}catch(e){return console.error(e.message),s.status(500).send({message:e.message})}})),A.delete("/deleteuser/:id",b,S,(async(e,s)=>{try{const{id:t}=e.params;return await u.findById(t)?(await u.findByIdAndDelete(t),s.status(200).send({message:"User deleted successfully"})):s.status(404).send({message:"User not found"})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.get("/all",b,(async(e,s)=>{try{const e=await u.find({}).select("-password");if(0===e.length)return s.status(404).send({message:"No Users found"});e.length,s.status(200).send({Users:e})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.post("/login",(async(e,s)=>{try{const{email:t,password:r}=e.body;if(!t||!r)return s.status(400).send({message:"Please provide both email and password."});const a=await u.findOneAndUpdate({email:t},{isActive:!0});if(!a)return s.status(404).send({message:"User not found."});if(!await f().compare(r,a.password))return s.status(401).send({message:"Invalid email or password."});const n=(e=>v().sign({userId:e._id,user_role:e.user_role},process.env.JWT_SECRET,{expiresIn:"24h"}))(a);s.status(200).send({token:n,user:a})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.patch("/logout/:id",(async(e,s)=>{const{id:t}=e.params;try{const e=await u.findByIdAndUpdate(t,{isActive:!1});if(!e)return s.status(404).send({message:"User not found."});s.send(e)}catch(e){return s.status(500).send({message:e.message})}})),A.get("/bookings/:id",b,(async(e,s)=>{const t=e.params.id;try{if(!e.params.id)return s.status(400).send({message:"Not A VALID USER"});const r=await l.find({user_id:t});if(0===r.length)return s.status(404).send({message:"No bookings found for this user"});s.status(200).send(r)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.get("/:id?",b,(async(e,s)=>{const t=e.params.id,r=e.query.pattern,a=e.query.userRole,n=e.query.userId;parseInt(r);try{let e;if(t){if(e=["dev","admin","senior admin","srdev"].includes(a)?await l.find({_id:t}):await l.find({_id:t,user_id:n}),0===e.length)return s.status(404).send({message:"No bookings found with this id"})}else{if(!r)return s.status(400).send({message:"Either id or pattern query parameter is required"});{const t={$or:[{company_name:{$regex:r,$options:"i"}},{contact_person:{$regex:r,$options:"i"}},{email:{$regex:r,$options:"i"}},{pan:{$regex:r,$options:"i"}},{gst:{$regex:r,$options:"i"}},{services:{$regex:r,$options:"i"}},{bdm:{$regex:r,$options:"i"}},{$expr:{$regexMatch:{input:{$toString:"$contact_no"},regex:r}}}]};if(e=["dev","admin","senior admin","srdev"].includes(a)?await l.find(t):await l.find({...t,user_id:n}),0===e.length)return s.status(404).send({message:"No bookings found matching the pattern"})}}s.status(200).send(e)}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.get("/:id",(async(e,s)=>{const t=e.params.id;try{if(!e.params.id)return s.status(400).send({message:"Not A VALID USER"});if(0===(await u.find({_id:t})).length)return s.status(404).send({message:"No User found with this id",status:!1});s.status(200).send({message:"VALID USER",status:!0})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.put("/password-reset",(async(e,s)=>{const{password:t,email:r}=e.body;if(!r||!t)return s.status(400).send({message:"Please provide both email and new password"});const a=r.toLowerCase();try{const e=await u.findOne({email:a});if(!e)return s.status(404).send({message:"User not found with this email"});const r=await f().hash(t,5);return e.password=r,await e.save(),s.status(200).send({message:"Password updated successfully"})}catch(e){return console.log(e.message),s.status(500).send({message:e.message})}})),A.post("/request-reset-password",(async(e,s)=>{const{email:t}=e.body;try{const e=await u.findOne({email:t});if(!e)return s.status(404).json({message:"User not found"});const r=m().randomBytes(20).toString("hex"),a=Date.now()+36e5;e.resetPasswordToken=r,e.resetPasswordExpires=a,await e.save();const n=`http://localhost:5353/user/reset-password/${r}`,o=y().createTransport({host:"smtp.hostinger.com",port:465,secure:!0,auth:{user:"siteadmin@enego.co.in",pass:"Siteadmin@enego@321"}}),i={to:e.email,from:"siteadmin@enego.co.in",subject:"Password Reset Request",text:`You are receiving this email because you (or someone else) have requested to reset the password for your account.\n\n\n      Please click the following link, or paste it into your browser to complete the process:\n\n\n      ${n}\n\n\n      If you did not request this, please ignore this email and your password will remain unchanged.`};await o.sendMail(i),s.status(200).json({message:"Password reset link sent to your email."})}catch(e){s.status(500).json({message:"Server error."})}})),A.post("/reset-password/:token",(async(e,s)=>{const{token:t}=e.params,{newPassword:r}=e.body;try{const e=await u.findOne({resetPasswordToken:t,resetPasswordExpires:{$gt:Date.now()}});if(!e)return s.status(400).json({message:"Invalid or expired token"});const a=await f().genSalt(5),n=await f().hash(r,a);e.password=n,e.resetPasswordToken=void 0,e.resetPasswordExpires=void 0,await e.save(),s.status(200).json({message:"Password reset successfully"})}catch(e){s.status(500).json({message:"Server error"})}}));const k=A,P=t().Router();P.post("/addbooking",b,(async(e,s)=>{const{user_id:t,bdm:r,branch_name:a,company_name:n,contact_person:o,email:i,contact_no:d,services:u,total_amount:c,term_1:p,term_2:m,term_3:g,payment_date:y,closed_by:h,pan:f,gst:w,remark:v,date:b,status:S,bank:A,funddisbursement:k,state:P}=e.body,_={branch_name:a,contact_person:o,user_id:t,bdm:r,email:i,services:u,total_amount:c,pan:f,state:P,date:b},E=Object.entries(_).filter((([e,s])=>!s||"services"===e&&(!Array.isArray(s)||0===s.length))).map((([e])=>e));if(E.length>0)return s.status(400).send({message:`Missing required fields: ${E.join(", ")}`});try{const e={user_id:t,bdm:r,branch_name:a,company_name:n||"",contact_person:o,email:i,contact_no:d,closed_by:h,services:u,total_amount:c,term_1:p,term_2:m,term_3:g,payment_date:y,pan:f,gst:w||"N/A",remark:v,date:b||new Date,status:S,bank:A,state:P,after_disbursement:k},_=await l.create(e);return s.status(201).send({Message:"Booking Created Successfully",booking_id:_._id,booking:_})}catch(e){return console.log(e),s.status(500).send({message:e.message})}})),P.patch("/editbooking/:id",b,(async(e,s)=>{const{id:t}=e.params;let r=e.body;const a=e.headers["user-role"];if(!a)return s.status(400).send({message:"User role is required"});const{updatedBy:n,note:o}=r;delete r.updatedBy,delete r.note;try{const e=await l.findById(t);if(!e)return s.status(404).send("Booking not found");const i=["dev","senior admin","srdev"];if("admin"===a){const{services:e,...s}=r;r=s}const d={};for(let s in r){const t=e[s],a=r[s];Array.isArray(t)?JSON.stringify(t)!==JSON.stringify(a)&&(d[s]={old:t,new:a}):t!==a&&(d[s]={old:t,new:a})}if(0===Object.keys(d).length)return s.status(400).send({message:"No changes detected"});const u={updatedBy:n||"Unknown",updatedAt:new Date,note:o||"",changes:d};if(i.includes(a)||"admin"===a){const e=await l.findByIdAndUpdate(t,{$set:r,$push:{updatedhistory:u}},{new:!0});return s.status(200).send({message:"Booking Updated Successfully",updatedBooking:e})}return s.status(403).send({message:"You do not have permission to edit this booking"})}catch(e){return s.status(500).send({message:e.message})}})),P.patch("/trash/:id",b,(async(e,s)=>{const{id:t}=e.params,r=e.headers["user-role"],a=e.headers["user-name"];if(!r||!["srdev","dev"].includes(r))return s.status(403).send({message:"Only dev or srdev can move bookings to trash."});try{const e=await l.findByIdAndUpdate(t,{isDeleted:!0,deletedAt:new Date,deletedBy:a||"Unknown"},{new:!0});if(!e)return s.status(404).send({message:"Booking not found"});s.status(200).send({message:"Booking moved to trash",trashedBooking:e})}catch(e){s.status(500).send({message:e.message})}})),P.get("/trash",b,(async(e,s)=>{const t=e.headers["user-role"];if(!t||"srdev"!==t)return s.status(403).send({message:"Only srdev can view trash."});try{const e=await l.find({isDeleted:!0}).sort({deletedAt:-1});s.status(200).send(e)}catch(e){s.status(500).send({message:e.message})}})),P.patch("/restore/:id",b,(async(e,s)=>{const{id:t}=e.params,r=e.headers["user-role"];if(!r||"srdev"!==r)return s.status(403).send({message:"Only srdev can restore trashed bookings."});try{const e=await l.findByIdAndUpdate(t,{isDeleted:!1,deletedAt:null},{new:!0});if(!e)return s.status(404).send({message:"Booking not found"});s.status(200).send({message:"Booking restored successfully",restoredBooking:e})}catch(e){s.status(500).send({message:e.message})}})),P.delete("/deletebooking/:id",b,(async(e,s)=>{const{id:t}=e.params;if("srdev"!==e.headers["user-role"])return s.status(403).send({message:"Only srdev can permanently delete bookings."});const r=await l.findById(t);if(!r)return s.status(404).send({message:"Booking not found"});if(!r.isDeleted)return s.status(400).send({message:"You must move this booking to trash before deleting."});try{return await l.findByIdAndDelete(t),s.status(200).send({message:"Booking permanently deleted."})}catch(e){return s.status(500).send({message:e.message})}})),P.get("/all",b,(async(e,s)=>{try{const e=await l.find({isDeleted:!1}).sort({createdAt:-1});return e.length?s.status(200).send({message:"All Bookings Fetched Successfully",Allbookings:e}):s.status(200).send({message:"No Bookings Found",Allbookings:[]})}catch(e){return console.error("Error in /all:",e.message),s.status(500).send({message:e.message})}})),P.get("/bookings/filter",b,(async(e,s)=>{const{startDate:t,endDate:r,status:a,service:n,userId:o,userRole:i,bdmName:d,paymentmode:u,paymentStartDate:c,paymentEndDate:p,page:m=1,limit:g=100}=e.query,y=parseInt(m,10),h=parseInt(g,10);try{const e={};if(t&&r&&!c&&!p){const a=new Date(t),n=new Date(r);if(isNaN(a)||isNaN(n))return s.status(400).send({message:"Invalid booking date format"});n.setHours(23,59,59,999),e.date={$gte:a,$lte:n}}if(c&&p){const t=new Date(c),r=new Date(p);if(isNaN(t)||isNaN(r))return s.status(400).send({message:"Invalid payment date format"});r.setHours(23,59,59,999),e.payment_date={$gte:t,$lte:r}}if(a){if(!["Pending","In Progress","Completed"].includes(a))return s.status(400).send({message:"Invalid status value"});e.status=new RegExp(`^${a.trim()}$`,"i")}if(n&&(e.services={$in:[n]}),u){if(!["Kotak Mahindra Bank","HDFC Bank","Razorpay","HDFC Gateway","CashFree Gateway","Phonepe Gateway","Cash"].includes(u))return s.status(400).send({message:"Invalid payment mode"});e.bank=u}if(d&&(e.bdm={$regex:new RegExp(d,"i")}),!i||!["dev","admin","senior admin","srdev"].includes(i)){if(!o)return s.status(403).send({message:"Access forbidden. No valid role or user ID provided."});e.user_id=o}e.isDeleted=!1;const m=await l.countDocuments(e),g=await l.find(e).sort({createdAt:-1}).skip((y-1)*h).limit(h);if(!g.length)return s.status(200).send([]);s.status(200).send({bookings:g,totalCount:m,totalPages:Math.ceil(m/h),currentPage:y})}catch(e){console.error("Error in /bookings/filter:",e.message),s.status(500).send({message:e.message})}}));const _=P,E=a().Schema({name:{type:String,required:!0},value:{type:String,required:!0,unique:!0},status:{type:Boolean,required:!0}},{timestamps:!1,versionKey:!1}),I=a().model("service",E),$=t().Router();$.post("/api/services",b,(async(e,s)=>{const{name:t,value:r,status:a}=e.body;if(!t||!r||!a)return s.status(400).send("Invalid input data");const n={name:t,value:r,status:a};try{const e=await I.create(n);s.status(201).send({message:"Service added successfully",Service:e})}catch(e){s.status(500).send({message:"Error adding service",error:e.message})}})),$.patch("/api/services/:id",b,S,(async(e,s)=>{const{id:t}=e.params,r=e.body;if(!r||0===Object.keys(r).length)return s.status(400).send({message:"No fields provided for update"});try{const e=await I.findByIdAndUpdate(t,{$set:r},{new:!0,runValidators:!0});if(!e)return s.status(404).send({message:"Service not found"});s.status(200).send({message:"Service updated successfully",service:e})}catch(e){s.status(500).send({message:"Error updating service",error:e.message})}})),$.get("/api/services",b,(async(e,s)=>{try{const e=await I.find();if(!e||0===e.length)return s.status(404).send({message:"No services found"});s.status(200).send(e)}catch(e){console.error("Error fetching services:",e),s.status(500).send({message:"Error fetching services",error:e.message})}})),$.delete("/api/services/:id",b,S,(async(e,s)=>{const{id:t}=e.params;try{const e=await I.findByIdAndDelete(t);if(!e)return s.status(404).send({message:"Service not found"});s.status(200).send({message:"Service deleted successfully",service:e})}catch(e){s.status(500).send({message:"Error deleting service",error:e.message})}}));const N=$;o().config();const q=process.env.MAIL_USER,O=process.env.MAIL_PASS,D=t().Router();D.post("/api/welcome",(async(e,s)=>{const{email:t,name:r,amount:a}=e.body;try{const e=y().createTransport({host:"smtp.hostinger.com",port:465,secure:!0,auth:{user:`${q}`,pass:`${O}`}}),a={to:`${t}`,from:"no-reply@enego.co.in",subject:`Warm Welcome to ${r}  from ENEGO GROUP OF COMPANIES\n`,html:`\n        <p>Dear Sir/Madam,</p>\n\n        <p>\n          We are pleased to extend a warm welcome to <b>${r}</b> as a valued client of \n          <b>ENEGO GROUP OF COMPANIES</b>. We sincerely appreciate the trust you’ve placed in us and are \n          excited about the opportunity to collaborate and contribute to your success.\n        </p>\n\n        <p>\n          At <b>ENEGO GROUP OF COMPANIES</b>, we are dedicated to offering high-quality, tailored services \n          designed to meet the unique needs of <b>${r}</b>. Our experienced team is committed to providing \n          expert support and guidance at every stage of our partnership to ensure a smooth and successful experience.\n        </p>\n\n        <p>\n          To facilitate a seamless process, one of our dedicated representatives will be in touch shortly \n          to coordinate with you and gather any necessary information. Please don’t hesitate to reach out \n          with any questions, concerns, or special requests. Your satisfaction is our highest priority, and \n          we are here to support you every step of the way.\n        </p>\n\n        <p>\n          Thank you once again for choosing <b>ENEGO GROUP OF COMPANIES</b>. We look forward to a successful \n          and fruitful collaboration, and to helping <b>${r}</b> achieve its business objectives.\n        </p>\n\n        <p>\n          For any queries kindly mail us at <a href="mailto:support@enego.co.in">support@enego.co.in</a>\n        </p>\n\n        <p style="color: #555; font-size: 14px; margin-top: 20px;">\n          <i>This is a system-generated email. Please do not reply to this email.</i>\n        </p>\n\n        <p>Warm regards,</p>\n        <p><b>ENEGO GROUP OF COMPANIES</b></p>\n        <p><a href="https://enego.co.in">enego.co.in</a></p>\n      `};await e.sendMail(a),s.status(200).json({message:"Welcome Mail Sent Successfully."})}catch(e){s.status(500).json({message:"Server error.",error:e.message})}}));const C=D,j=require("cloudinary"),x=require("multer-storage-cloudinary"),B=require("multer");var M=e.n(B);j.v2.config({cloud_name:"dz9eyvx11",api_key:"715114493934563",api_secret:"DhAo0nfSNx2jfDCgMe_FNwIds9Y"});const U=new x.CloudinaryStorage({cloudinary:j.v2,params:async(e,s)=>{const t=Date.now(),r=e.user?.user_id||"anonymous",a=s.originalname.split(".").pop();return{folder:"employee_profiles",public_id:`${r}_${s.fieldname}_${t}.${a}`,allowed_formats:["jpg","jpeg","png"]}}}),R=M()({storage:U,limits:{fileSize:5242880}}),T=a().Schema({userId:{type:String,required:!0,unique:!0},employeeFullName:{type:String,required:!0},employeeId:{type:String,unique:!0},designation:{type:String,required:!0},department:{type:String,required:!0,enum:["Sales","Digital","Admin","Legal","Finance"]},branch:{type:String,required:!0,enum:["1206","808","1512","Admin","Digital","407 AMD","408 AMD","906"]},gender:{type:String,required:!0,enum:["Male","Female","Other"]},maritalStatus:{type:String,required:!0,enum:["Single","Married","Divorced","Widowed"]},dateOfBirth:{type:Date,required:!0},personalContactNumber:{type:String,required:!0},personalEmailAddress:{type:String,required:!0,lowercase:!0,trim:!0},workEmail:{type:String,required:!0,lowercase:!0,trim:!0},workPhoneNumber:{type:String,required:!0},permanentAddress:{type:String,required:!0},currentAddress:{type:String,required:!0},emergencyContactName:{type:String,required:!0},emergencyContactNumber:{type:String,required:!0},emergencyContactRelationship:{type:String,required:!0,enum:["Father","Mother","Spouse","Brother","Sister","Friend","Other"]},dateOfJoining:{type:Date,required:!0},reportingManager:{type:String,required:!0},offeredSalary:{type:String,required:!0},dateOfLastPromotion:{type:Date},educationQualification:{type:String,required:!0},previousEmployer:{type:String},totalWorkExperience:{type:String,required:!0},accountNumber:{type:String,required:!0},bankName:{type:String,required:!0},ifscCode:{type:String,required:!0},panNumber:{type:String,required:!0,uppercase:!0,trim:!0},aadharNumber:{type:String,required:!0},employeePhoto:{type:String,required:!0},aadhaarCardPhoto:{type:String,required:!0},isActive:{type:Boolean,default:!0},profileCompletionStatus:{type:String,enum:["incomplete","pending_review","approved","rejected"],default:"pending_review"},createdBy:{type:String},updatedBy:{type:String},approvedBy:{type:String},approvedAt:{type:Date},updateHistory:[{updatedBy:{type:String,required:!0},updatedAt:{type:Date,default:Date.now},changes:{type:Map,of:{oldValue:a().Schema.Types.Mixed,newValue:a().Schema.Types.Mixed}},reason:{type:String}}]},{timestamps:!0,versionKey:!1});T.pre("save",(async function(e){if(this.isNew&&!this.employeeId)try{const e={Sales:"SL",Digital:"DG",Admin:"AD",Legal:"LG",Finance:"FN"}[this.department]||"EMP",s=(new Date).getFullYear().toString().slice(-2),t=await this.constructor.findOne({employeeId:new RegExp(`^${e}${s}`)}).sort({employeeId:-1});let r=1;t&&t.employeeId&&(r=parseInt(t.employeeId.slice(-4))+1),this.employeeId=`${e}${s}${r.toString().padStart(4,"0")}`,this.createdBy=this.userId}catch(s){return e(s)}e()})),T.index({userId:1}),T.index({employeeId:1}),T.index({department:1}),T.index({branch:1}),T.index({personalEmailAddress:1}),T.index({workEmail:1});const F=a().model("EmployeeProfile",T),H=t().Router(),L=(e,s,t)=>{if("HR"!==e.user.user_role)return s.status(403).json({message:"Access denied. Only HR personnel can perform this action."});t()};H.use(b),H.get("/all",L,(async(e,s)=>{try{const{page:t=1,limit:r=50,department:a,branch:n,status:o,search:i}=e.query,d={isActive:!0};a&&(d.department=a),n&&(d.branch=n),o&&(d.profileCompletionStatus=o),i&&(d.$or=[{employeeFullName:{$regex:i,$options:"i"}},{employeeId:{$regex:i,$options:"i"}},{personalEmailAddress:{$regex:i,$options:"i"}},{workEmail:{$regex:i,$options:"i"}}]);const u=(parseInt(t)-1)*parseInt(r),[c,l]=await Promise.all([F.find(d).select("-updateHistory -__v").sort({createdAt:-1}).skip(u).limit(parseInt(r)),F.countDocuments(d)]);s.json({employees:c,pagination:{currentPage:parseInt(t),totalPages:Math.ceil(l/parseInt(r)),totalEmployees:l,hasNext:u+c.length<l,hasPrev:parseInt(t)>1}})}catch(e){console.error("GET /all error:",e),s.status(500).json({error:"Server error",details:e.message})}})),H.get("/profile/:id",((e,s,t)=>{const r=e.params.id;if(e.user.userId!==r&&"HR"!==e.user.role)return s.status(403).json({message:"Access denied. You can only access your own profile or need HR privileges."});t()}),(async(e,s)=>{try{const t=await F.findOne({userId:e.params.id,isActive:!0}).select("-updateHistory -__v");if(!t)return s.status(404).json({error:"Profile not found"});s.json({profile:t})}catch(e){console.error("GET /profile/:id error:",e),s.status(500).json({error:"Server error",details:e.message})}})),H.post("/profile",R.fields([{name:"employeePhoto",maxCount:1},{name:"aadhaarCardPhoto",maxCount:1}]),((e,s,t)=>{const r=["employeeFullName","designation","department","branch","gender","maritalStatus","dateOfBirth","personalContactNumber","personalEmailAddress","workEmail","workPhoneNumber","permanentAddress","currentAddress","emergencyContactName","emergencyContactNumber","emergencyContactRelationship","dateOfJoining","reportingManager","offeredSalary","educationQualification","totalWorkExperience","accountNumber","bankName","ifscCode","panNumber","aadharNumber"].filter((s=>!e.body[s]));if(r.length>0)return s.status(400).json({error:"Missing required fields",missingFields:r});const a=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;if(!a.test(e.body.personalEmailAddress)||!a.test(e.body.workEmail))return s.status(400).json({error:"Invalid email format"});const n=/^\d{10}$/;return n.test(e.body.personalContactNumber.replace(/\D/g,""))&&n.test(e.body.workPhoneNumber.replace(/\D/g,""))?/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(e.body.panNumber.toUpperCase())?/^\d{12}$/.test(e.body.aadharNumber.replace(/\D/g,""))?void t():s.status(400).json({error:"Invalid Aadhar number format"}):s.status(400).json({error:"Invalid PAN number format"}):s.status(400).json({error:"Invalid phone number format"})}),(async(e,s)=>{try{if(await F.findOne({userId:e.user.userId}))return s.status(400).json({error:"Profile already exists for this user"});if(!e.files?.employeePhoto||!e.files?.aadhaarCardPhoto)return s.status(400).json({error:"Both employee photo and Aadhaar card photo are required"});if(await F.findOne({$or:[{personalEmailAddress:e.body.personalEmailAddress.toLowerCase()},{workEmail:e.body.workEmail.toLowerCase()}]}))return s.status(400).json({error:"Email address already exists in the system"});const t={userId:e.user.userId,...e.body,personalEmailAddress:e.body.personalEmailAddress.toLowerCase(),workEmail:e.body.workEmail.toLowerCase(),panNumber:e.body.panNumber.toUpperCase(),employeePhoto:e.files.employeePhoto[0].path,aadhaarCardPhoto:e.files.aadhaarCardPhoto[0].path,createdBy:e.user.userId},r=new F(t);await r.save();const a=r.toObject();delete a.updateHistory,s.status(201).json({message:"Employee profile created successfully",profile:a})}catch(e){if(console.error("POST /profile error:",e),11e3===e.code){const t=Object.keys(e.keyPattern)[0];return s.status(400).json({error:`${t} already exists in the system`})}s.status(500).json({error:"Server error",details:e.message})}})),H.put("/update/:id",L,(async(e,s)=>{try{const t=await F.findOne({userId:e.params.id,isActive:!0});if(!t)return s.status(404).json({error:"Profile not found"});const r=new Map,a={};if(["employeeFullName","designation","department","branch","gender","maritalStatus","dateOfBirth","personalContactNumber","personalEmailAddress","workEmail","workPhoneNumber","permanentAddress","currentAddress","emergencyContactName","emergencyContactNumber","emergencyContactRelationship","dateOfJoining","reportingManager","dateOfLastPromotion","educationQualification","previousEmployer","totalWorkExperience","accountNumber","bankName","ifscCode","panNumber","aadharNumber"].forEach((s=>{void 0!==e.body[s]&&e.body[s]!==t[s]&&(r.set(s,{oldValue:t[s],newValue:e.body[s]}),a[s]=e.body[s])})),e.files?.employeePhoto&&(r.set("employeePhoto",{oldValue:t.employeePhoto,newValue:e.files.employeePhoto[0].path}),a.employeePhoto=e.files.employeePhoto[0].path),e.files?.aadhaarCardPhoto&&(r.set("aadhaarCardPhoto",{oldValue:t.aadhaarCardPhoto,newValue:e.files.aadhaarCardPhoto[0].path}),a.aadhaarCardPhoto=e.files.aadhaarCardPhoto[0].path),0===Object.keys(a).length)return s.status(400).json({message:"No changes detected"});a.updatedBy=e.user.userId,a.$push={updateHistory:{updatedBy:e.user.userId,changes:r,reason:e.body.updateReason||"Profile update"}};const n=await F.findOneAndUpdate({userId:e.params.id},a,{new:!0,runValidators:!0}).select("-updateHistory -__v");s.json({message:"Profile updated successfully",profile:n,changesCount:r.size})}catch(e){if(console.error("PUT /update/:id error:",e),11e3===e.code){const t=Object.keys(e.keyPattern)[0];return s.status(400).json({error:`${t} already exists in the system`})}s.status(500).json({error:"Server error",details:e.message})}})),H.delete("/delete/:id",L,(async(e,s)=>{try{const t=await F.findOneAndUpdate({userId:e.params.id,isActive:!0},{isActive:!1,updatedBy:e.user.userId,$push:{updateHistory:{updatedBy:e.user.userId,changes:new Map([["isActive",{oldValue:!0,newValue:!1}]]),reason:e.body.reason||"Profile deactivated"}}},{new:!0});if(!t)return s.status(404).json({error:"Profile not found"});s.json({message:"Employee profile deactivated successfully",employeeId:t.employeeId})}catch(e){console.error("DELETE /delete/:id error:",e),s.status(500).json({error:"Server error",details:e.message})}})),H.post("/approve/:id",L,(async(e,s)=>{try{const t=await F.findOneAndUpdate({userId:e.params.id,isActive:!0},{profileCompletionStatus:"approved",approvedBy:e.user.userId,approvedAt:new Date,updatedBy:e.user.userId,$push:{updateHistory:{updatedBy:e.user.userId,changes:new Map([["profileCompletionStatus",{oldValue:"pending_review",newValue:"approved"}]]),reason:"Profile approved by HR"}}},{new:!0}).select("-updateHistory -__v");if(!t)return s.status(404).json({error:"Profile not found"});s.json({message:"Employee profile approved successfully",profile:t})}catch(e){console.error("POST /approve/:id error:",e),s.status(500).json({error:"Server error",details:e.message})}})),H.get("/stats",L,(async(e,s)=>{try{const[e,t,r,a,n]=await Promise.all([F.countDocuments({isActive:!0}),F.aggregate([{$match:{isActive:!0}},{$group:{_id:"$department",count:{$sum:1}}},{$sort:{count:-1}}]),F.aggregate([{$match:{isActive:!0}},{$group:{_id:"$branch",count:{$sum:1}}},{$sort:{count:-1}}]),F.aggregate([{$match:{isActive:!0}},{$group:{_id:"$profileCompletionStatus",count:{$sum:1}}}]),F.find({isActive:!0}).sort({dateOfJoining:-1}).limit(5).select("employeeFullName employeeId department dateOfJoining")]);s.json({totalEmployees:e,departmentStats:t,branchStats:r,statusStats:a,recentJoinees:n})}catch(e){console.error("GET /stats error:",e),s.status(500).json({error:"Server error",details:e.message})}})),H.get("/export",L,(async(e,s)=>{try{const{format:t="json",department:r,branch:a}=e.query,n={isActive:!0};r&&(n.department=r),a&&(n.branch=a);const o=await F.find(n).select("-updateHistory -__v -employeePhoto -aadhaarCardPhoto").sort({employeeId:1});if("csv"===t){const e=["Employee ID","Full Name","Designation","Department","Branch","Personal Email","Work Email","Personal Phone","Work Phone","Date of Joining","Reporting Manager"].join(","),t=o.map((e=>[e.employeeId,e.employeeFullName,e.designation,e.department,e.branch,e.personalEmailAddress,e.workEmail,e.personalContactNumber,e.workPhoneNumber,e.dateOfJoining?.toISOString().split("T")[0]||"",e.reportingManager].join(","))).join("\n");s.setHeader("Content-Type","text/csv"),s.setHeader("Content-Disposition","attachment; filename=employees.csv"),s.send(e+"\n"+t)}else s.json({employees:o,count:o.length})}catch(e){console.error("GET /export error:",e),s.status(500).json({error:"Server error",details:e.message})}}));const G=H,V=require("cors");var W=e.n(V);const J=t()();J.use(t().json()),J.use(W()()),J.use(W()({origin:"*",methods:["GET","POST","PUT","DELETE","PATCH"],allowedHeaders:["Content-Type","Authorization","user-role"],credentials:!0})),J.use("/user",k),J.use("/booking",_),J.use("/services",N),J.use("/mail",C),J.use("/employee",G),J.get("/",((e,s)=>{s.send("<h1>server is running successfully</h1>")})),(async()=>{try{const e=await a().connect(process.env.Mongo_URL);console.log(`MongoDB Connected: ${e.connection.host}`)}catch(e){console.log({msg:"cannot connect to db",error:e.message}),process.exit(1)}})().then((()=>{console.log("connected"),J.listen(i,"0.0.0.0",(()=>{console.log(`Server is running at http://0.0.0.0:${i}`)}))})).catch((e=>{console.log(e)}))})();